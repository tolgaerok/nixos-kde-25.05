# .bashrc

# Source global definitions
if [ -f /etc/bashrc ]; then
    . /etc/bashrc
fi

# User specific environment
if ! [[ "$PATH" =~ "$HOME/.local/bin:$HOME/bin:" ]]; then
    PATH="$HOME/.local/bin:$HOME/bin:$PATH"
fi
export PATH

# Uncomment the following line if you don't like systemctl's auto-paging feature:
# export SYSTEMD_PAGER=

# User specific aliases and functions
if [ -d ~/.bashrc.d ]; then
    for rc in ~/.bashrc.d/*; do
        if [ -f "$rc" ]; then
            . "$rc"
        fi
    done
fi
unset rc

alias nv-yad='cd "/home/tolga/Documents/MEGA/Documents/LINUX/fedora/RPM-BIILD/rpmbuild/SCRIPTS/YAD scripts/" && clear && sudo ./yad-nvidia.sh'
alias po-yad='cd "/home/tolga/Documents/MEGA/Documents/LINUX/fedora/RPM-BIILD/rpmbuild/SCRIPTS/YAD scripts/" && clear && sudo ./yad-post.sh'




btrfs_manage() {
    clear
    echo ""
    echo "###---------- BTRFS TOOLS ----------######"
    echo "Choose an operation:"
    echo "1) Balance /home"
    echo "2) Balance /"
    echo "3) Scrub /home"
    echo "4) Scrub /"
    echo "5) Exit"
    read -p "Enter your choice [1-5]: " choice

    case $choice in
    1)
        echo "Starting balance on /home..."
        sudo btrfs balance start /home && sudo btrfs balance status /home
        ;;
    2)
        echo "Starting balance on /..."
        sudo btrfs balance start / && sudo btrfs balance status /
        ;;
    3)
        echo "Starting scrub on /home..."
        sudo btrfs scrub start /home && sudo btrfs scrub status /home
        ;;
    4)
        echo "Starting scrub on /..."
        sudo btrfs scrub start / && sudo btrfs scrub status /
        ;;
    5)
        echo "Exiting."
        return 0
        ;;
    *)
        echo "Invalid option. Please choose a number between 1 and 5."
        ;;
    esac
}

alias btrfs-manage="btrfs_manage"

alias scrub="echo -e \"üîç Running Btrfs Maintenance...\" && \
sudo btrfs scrub start -B / && echo -e \"‚úÖ Scrub completed!\" && \
sudo btrfs balance start -v / && echo -e \"‚úÖ Balance completed!\" && \
sudo fstrim -av && echo -e \"üöÄ Trim completed\\!\""

YELLOW="\033[1;33m"
BLUE="\033[0;34m"
RED="\033[0;31m"
NC="\033[0m"

check2() {
    # Colors
    RED='\033[0;31m'
    YELLOW='\033[1;33m'
    BLUE='\033[0;34m'
    NC='\033[0m' # No Color

    # Find active network interface (prioritizing wireless or ethernet)
    interface=$(ip -o link show | awk -F': ' '$2 ~ /^(wlp|wlo|wlx|eth|eno)/ && $0 ~ /state UP/ && $0 !~ /NO-CARRIER/ {print $2; exit}')

    if [[ -z "$interface" ]]; then
        echo -e "${RED}Error: No active network interface detected!${NC}"
        return 1
    fi

    echo -e "${BLUE}Restarting CAKE qdisc for interface: ${YELLOW}$interface${NC}"

    echo -e "${BLUE}Verifying qdisc configuration for ${YELLOW}$interface${NC}"
    sudo tc -s qdisc show dev "$interface"

    echo -e "${BLUE}Systemd service statuses:${NC}"
    echo -e "${YELLOW}\n ‚îÄ‚îÄ‚îÄ Timers ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${NC}"

    # Check linuxtweaks-flatpak.timer (user)
    timer_line=$(systemctl --user list-timers --no-pager --all | grep linuxtweaks-flatpak.timer || true)
    if [[ -n "$timer_line" ]]; then
        read -r _ next_date next_time _ next_in _ timer_name triggered_service <<< "$timer_line"

        echo -e "${BLUE}  ‚è∞ Timer:${NC} ${YELLOW}$timer_name (user)${NC}"
        echo -e "${BLUE}  ‚è≥ Next run:${NC} $next_date $next_time ( ${YELLOW}$next_in${NC} left )"
        echo -e "${BLUE}  üîß Triggers service:${NC} ${YELLOW}$triggered_service${NC}"
    else
        echo -e "${RED}  ‚ö†Ô∏è No linuxtweaks-flatpak.timer (user) found.${NC}"
    fi

    echo -e "${YELLOW}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${NC}\n"

    # Services and timers to check
    # Format: name:scope (scope = user or system)
    declare -A units=(
        [linuxTweaks-autostart.service]="system"
        [linuxtweaks-cake-resume.service]="system"
        [linuxtweaks-cake.service]="system"
        [linuxtweaks-flatpak.service]="user"
        [linuxtweaks-flatpak.timer]="user"
        [ntp-check.service]="system"
        [ntp-check.timer]="system"
        [ntp-check-timer-restart.service]="system"
        [preload.service]="system"
        [wsdd-sleep.service]="system"
        [wsdd-starter.service]="system"
        [wsdd.service]="system"
    )

    for service in "${!units[@]}"; do
        scope="${units[$service]}"
        echo -e "${BLUE}Status of ${YELLOW}${service}${NC} (${scope} level)"
        echo -e "${YELLOW}‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ${NC}"

        if [[ "$scope" == "user" ]]; then
            systemctl --user status "$service" --no-pager
        else
            sudo systemctl status "$service" --no-pager
        fi
        echo ""
    done
}

# Get active interface
interface=$(ip -o link show | awk -F': ' '$2 ~ /^(wlp|wlo|wlx|eth|eno)/ && $0 ~ /state UP/ && $0 !~ /NO-CARRIER/ {print $2; exit}')

if [[ -z "$interface" ]]; then
    echo -e "No active network interface detected!"
    exit 1
fi

# Remove existing CAKE qdisc if any
echo -e "${YELLOW}Removing existing qdisc (if any)...${NC}"
sudo tc qdisc del dev "$interface" root 2>/dev/null || echo -e "${BLUE}No previous qdisc found, continuing...${NC}"

sudo systemctl daemon-reload
sudo systemctl restart linuxtweaks-cake.service
sudo systemctl restart linuxtweaks-cake-resume.service
sudo systemctl restart linuxTweaks-autostart.service

sudo journalctl -u linuxtweaks-cake.service -b --no-pager

-------------------------------------------------------------------------------------------------------------------------------------------------

ExecStart=/bin/bash -c '/usr/bin/notify-send "" "üåê  Checking for flatpak cruft" --app-name="üîß  Flatpak Maintenance" -i /usr/local/bin/LinuxTweaks/images/LinuxTweak.png -u NORMAL && /usr/bin/flatpak --system uninstall --unused -y --noninteractive && /usr/bin/flatpak --user uninstall --unused -y --noninteractive && sleep 5 && /usr/bin/notify-send "" "üì°  Checking for flatpak UPDATES" --app-name="üì°  Flatpak Updater" -i /usr/local/bin/LinuxTweaks/images/LinuxTweak.png -u NORMAL && /usr/bin/flatpak --system update -y --noninteractive && /usr/bin/flatpak --user update -y --noninteractive && sleep 5 && /usr/bin/notify-send "" "üíª  Checking and repairing Flatpaks" --app-name="üîß  Flatpak Repair Service" -i /usr/local/bin/LinuxTweaks/images/LinuxTweak.png -u NORMAL && /usr/bin/flatpak --system repair && /usr/bin/flatpak --user repair && sleep 5 && /usr/bin/notify-send "Flatpaks checked, fixed and updated" "‚úÖ  Your computer is ready!" --app-name="üíª  Flatpak Update Service" -i /usr/local/bin/LinuxTweaks/images/LinuxTweak.png -u NORMAL'




Optional enhancements:
1. Show origin (e.g., flathub):

flatpak list --app --columns=name,application,origin

2. Verbose list with more details:

flatpak list --app --columns=name,application,version,origin

3. List apps with installation scope (system/user):

flatpak list --app --columns=name,application,installation


-------------------------------------------------------------------------------------------------------------------------------------------------


GRUB_TIMEOUT=5
GRUB_DISTRIBUTOR="$(sed 's, release .*$,,g' /etc/system-release)"
GRUB_DEFAULT=saved
GRUB_DISABLE_SUBMENU=true
GRUB_TERMINAL_OUTPUT="console"
GRUB_CMDLINE_LINUX="rhgb quiet nvidia.modeset=1 nvidia_drm.modeset=1 zswap.enabled=1 zswap.compressor=lz4 zswap.max_pool_percent=10 zswap.zpool=zsmalloc transparent_hugepage=never io_delay=none rootdelay=0 iomem=relaxed rd.driver.blacklist=nouveau modprobe.blacklist=nouveau tsc=nowatchdog audit=0 rcupdate.rcu_expedited=1 no_timer_check mitigations=off cryptomgr.notests nosoftlockup nomce skew_tick=1 split_lock_detect=off loglevel=3 systemd.show_status=auto rd.udev.log_level=3"



GRUB_DISABLE_RECOVERY="true"
GRUB_ENABLE_BLSCFG=true
GRUB_TIMEOUT_STYLE=menu

sudo grub2-mkconfig -o /boot/grub2/grub.cfg
sudo dracut -f

-------------------------------------------------------------------------------------------------------------------------------------------------

alias exe='find . -maxdepth 1 -type f \( -iname "*.sh" -o -iname "*.bashrc" -o -iname "*.service" -o -iname "*.timer" -o -iname "*.txt" \) -exec chmod +x {} \;'

alias exe='echo "Scanning for script files in: $(pwd)" && find . -type f \( -name "*.sh" -o -name "*.bash" -o -name "*.service" -o -name "*.timer" -o -name "*.conf" -o -name "*.nix" -o -name "*.txt" \) -print0 | while IFS= read -r -d "" file; do
  echo "Making executable: $file"
  chmod +x "$file"
done'


--------------------------------------------------------------------

#!/bin/bash
clear
echo "üîÅ Reloading system daemons..."
sudo systemctl daemon-reexec
sudo systemctl daemon-reload
sudo systemctl reset-failed

echo "üë§ Reloading user daemons..."
systemctl --user daemon-reexec
systemctl --user daemon-reload
systemctl --user reset-failed

echo "üßπ Vacuuming logs older than 7 days..."
sudo logrotate -f /etc/logrotate.conf
sudo journalctl --vacuum-time=7d

echo "‚úÖ All done."



sudo firewall-cmd --permanent --add-port=3702/udp
sudo firewall-cmd --permanent --add-port=5357/tcp
sudo firewall-cmd --reload
sudo systemctl enable --now avahi-daemon

--------------------------------

# Disable the autostart service from enabling services every boot
sudo systemctl stop linuxTweaks-autostart.service
sudo systemctl disable linuxTweaks-autostart.service

# Manually enable all needed services once:
sudo systemctl enable smb.service nmb.service linuxtweaks-cake.service linuxtweaks-cake-resume.service ntp-check.service ntp-check.timer preload.service wsdd-sleep.service wsdd-starter.service wsdd.service

# If you want to still use the autostart service, edit it to only start the services:
sudo nano /etc/systemd/system/linuxTweaks-autostart.service
# Remove all ExecStartPre lines, keep ExecStart with systemctl start ...

# Reload systemd daemon and start the service if needed
sudo systemctl daemon-reload
sudo systemctl start linuxTweaks-autostart.service
