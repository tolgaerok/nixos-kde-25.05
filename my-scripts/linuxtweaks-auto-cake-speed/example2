#!/usr/bin/env bash

# ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
# ‚ïë   LinuxTweaks - Auto CAKE QoS Full Script     ‚ïë
# ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù

# set -e

# 1. Check dependencies
for cmd in speedtest-cli ip tc jq systemctl; do
    if ! command -v $cmd &>/dev/null; then
        echo "‚ùå Missing required tool: $cmd"
        echo "   Please install it (e.g., 'sudo dnf install speedtest-cli jq iproute')"
        exit 1
    fi
done

# 2. Run speed test and extract values
echo "üì° Running speedtest..."
SPEED_JSON=$(speedtest-cli --json)
DOWNLOAD_RAW=$(echo "$SPEED_JSON" | jq '.download')
UPLOAD_RAW=$(echo "$SPEED_JSON" | jq '.upload')
PING_LATENCY=$(echo "$SPEED_JSON" | jq '.ping')

if [[ -z "$UPLOAD_RAW" || -z "$DOWNLOAD_RAW" || -z "$PING_LATENCY" ]]; then
    echo "‚ùå Failed to parse speedtest results."
    exit 1
fi

# 3. Convert to Kbit and reduce to 95% for safety margin
UPLOAD_KBIT=$(printf "%.0f" "$(echo "$UPLOAD_RAW * 0.00095" | bc)")     # bits to Kbit then 95%
DOWNLOAD_KBIT=$(printf "%.0f" "$(echo "$DOWNLOAD_RAW * 0.00095" | bc)") # bits to Kbit then 95%
RTT_MS=$(printf "%.0f" "$PING_LATENCY")

echo -e "\nüì∂ Current Speedtest Results:"
echo "  ‚ñ∏ Download Speed: $((DOWNLOAD_KBIT / 1000)) Mbit/s"
echo "  ‚ñ∏ Upload Speed  : $((UPLOAD_KBIT / 1000)) Mbit/s"
echo "  ‚ñ∏ Ping Latency  : ${RTT_MS} ms"

# 4. Detect active outbound interface
IFACE=$(ip route get 1.1.1.1 | awk '{for(i=1;i<=NF;i++) if($i=="dev") print $(i+1); exit}')
[[ -z "$IFACE" ]] && { echo "‚ùå No active interface found."; exit 1; }
echo "üß≠ Detected active interface: $IFACE"

# 5. Write script to reapply CAKE with dynamic values
echo "‚öôÔ∏è Writing CAKE QoS apply script..."
sudo tee /usr/local/bin/linuxcake.sh >/dev/null <<EOF
#!/usr/bin/env bash

IFACE=\$(ip route get 1.1.1.1 | awk '{for(i=1;i<=NF;i++) if(\$i=="dev") print \$(i+1); exit}')
[ -z "\$IFACE" ] && { echo "No network interface found."; exit 1; }

# Reapply CAKE settings
tc qdisc replace dev "\$IFACE" root cake \\
  bandwidth ${UPLOAD_KBIT}Kbit \\
  diffserv4 triple-isolate nat nowash ack-filter split-gso \\
  rtt ${RTT_MS}ms noatm overhead 44

echo -e "\\n‚úÖ CAKE settings applied on \$IFACE:"
tc qdisc show dev "\$IFACE"
EOF

sudo chmod +x /usr/local/bin/linuxcake.sh

# 6. Systemd boot-time service
sudo tee /etc/systemd/system/linuxcake.service >/dev/null <<EOF
[Unit]
Description=LinuxTweaks: Apply CAKE QoS on Boot
After=network-online.target
Wants=network-online.target

[Service]
Type=oneshot
ExecStart=/usr/local/bin/linuxcake.sh
RemainAfterExit=true

[Install]
WantedBy=multi-user.target
EOF

# 7. Resume-from-suspend service
sudo tee /etc/systemd/system/linuxcake-resume.service >/dev/null <<EOF
[Unit]
Description=LinuxTweaks: Reapply CAKE on Resume
After=suspend.target
Requires=linuxcake.service

[Service]
Type=oneshot
ExecStart=/usr/local/bin/linuxcake.sh

[Install]
WantedBy=suspend.target
EOF

# 8. Enable services
sudo systemctl daemon-reexec
sudo systemctl daemon-reload
sudo systemctl enable --now linuxcake.service
sudo systemctl enable linuxcake-resume.service

echo -e "\nüéâ All done!"
echo "CAKE QoS is active on interface: $IFACE"
echo "Upload limited to: ${UPLOAD_KBIT} Kbit/s"
echo "RTT set to: ${RTT_MS} ms"
